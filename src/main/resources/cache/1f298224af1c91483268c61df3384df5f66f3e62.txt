{"sha":"1f298224af1c91483268c61df3384df5f66f3e62","commit":{"url":"https://api.github.com/repos/phellipealexandre/CoolPosts/git/commits/1f298224af1c91483268c61df3384df5f66f3e62","message":"Creates retrofit post service with it respective tests. Also changes Gson to Moshi"},"url":"https://api.github.com/repos/phellipealexandre/CoolPosts/commits/1f298224af1c91483268c61df3384df5f66f3e62","files":[{"sha":"ee5757fb916eec6e1def1e156cc67c1696190b39","filename":"app/build.gradle","status":"modified","additions":5,"changes":6,"patch":"@@ -52,13 +52,17 @@ dependencies {\n     //Retrofit\n     implementation \"com.squareup.retrofit2:retrofit:2.5.0\"\n     implementation \"com.squareup.retrofit2:adapter-rxjava2:2.5.0\"\n-    implementation \"com.squareup.retrofit2:converter-gson:2.5.0\"\n+    implementation \u0027com.squareup.retrofit2:converter-moshi:2.5.0\u0027\n \n     //Logging\n     implementation \"com.jakewharton.timber:timber:4.7.1\"\n \n+    //JUnit\n     testImplementation \u0027junit:junit:4.12\u0027\n \n+    //RestMock\n+    testImplementation \u0027com.github.andrzejchm:RESTMock:0.3.3\u0027\n+\n     androidTestImplementation \u0027androidx.test:runner:1.1.2-alpha02\u0027\n     androidTestImplementation \u0027androidx.test.espresso:espresso-core:3.2.0-alpha02\u0027\n }"},{"sha":"06a3465192a2d80e166f9ac13287dbf9acbfb857","filename":"app/src/main/java/com/phellipesilva/coolposts/postlist/service/PostService.kt","status":"modified","additions":16,"changes":16,"patch":"@@ -1,4 +1,20 @@\n package com.phellipesilva.coolposts.postlist.service\n \n+import com.phellipesilva.coolposts.postlist.service.entities.CommentRemoteEntity\n+import com.phellipesilva.coolposts.postlist.service.entities.PostRemoteEntity\n+import com.phellipesilva.coolposts.postlist.service.entities.UserRemoteEntity\n+import io.reactivex.Observable\n+import retrofit2.http.GET\n+import retrofit2.http.Query\n+\n interface PostService {\n+\n+    @GET(\"posts\")\n+    fun getPosts(): Observable\u003cList\u003cPostRemoteEntity\u003e\u003e\n+\n+    @GET(\"users\")\n+    fun getUsers(): Observable\u003cList\u003cUserRemoteEntity\u003e\u003e\n+\n+    @GET(\"comments\")\n+    fun getComments(@Query(\"postId\") postId: Int): Observable\u003cList\u003cCommentRemoteEntity\u003e\u003e\n }\n\\ No newline at end of file"},{"sha":"bda3399933ffec98b441cdc18f913925ffc2fb39","filename":"app/src/main/java/com/phellipesilva/coolposts/postlist/service/UserService.kt","status":"removed","additions":0,"changes":4,"patch":"@@ -1,4 +0,0 @@\n-package com.phellipesilva.coolposts.postlist.service\n-\n-interface UserService {\n-}\n\\ No newline at end of file"},{"sha":"21006009baab9e00323dea32dbe2d8c5c1ba1320","filename":"app/src/main/java/com/phellipesilva/coolposts/postlist/service/entities/CommentRemoteEntity.kt","status":"added","additions":9,"changes":9,"patch":"@@ -0,0 +1,9 @@\n+package com.phellipesilva.coolposts.postlist.service.entities\n+\n+data class CommentRemoteEntity(\n+    val postId: Int,\n+    val id: Int,\n+    val name: String,\n+    val email: String,\n+    val body: String\n+)\n\\ No newline at end of file"},{"sha":"6c311e384584deefb9c4dae782117796b47c2184","filename":"app/src/main/java/com/phellipesilva/coolposts/postlist/service/entities/PostRemoteEntity.kt","status":"added","additions":8,"changes":8,"patch":"@@ -0,0 +1,8 @@\n+package com.phellipesilva.coolposts.postlist.service.entities\n+\n+data class PostRemoteEntity(\n+    val userId: Int,\n+    val id: Int,\n+    val title: String,\n+    val body: String\n+)\n\\ No newline at end of file"},{"sha":"a2d1481cb528ee49c77804615a835059cde73c0b","filename":"app/src/main/java/com/phellipesilva/coolposts/postlist/service/entities/UserRemoteEntity.kt","status":"added","additions":7,"changes":7,"patch":"@@ -0,0 +1,7 @@\n+package com.phellipesilva.coolposts.postlist.service.entities\n+\n+data class UserRemoteEntity(\n+    val id: Int,\n+    val name: String,\n+    val website: String\n+)\n\\ No newline at end of file"},{"sha":"76d7110f39ae6b717198b0bc7825c263a0543a36","filename":"app/src/test/java/com/phellipesilva/coolposts/ExampleUnitTest.kt","status":"removed","additions":0,"changes":17,"patch":"@@ -1,17 +0,0 @@\n-package com.phellipesilva.coolposts\n-\n-import org.junit.Test\n-\n-import org.junit.Assert.*\n-\n-/**\n- * Example local unit test, which will execute on the development machine (host).\n- *\n- * See [testing documentation](http://d.android.com/tools/testing).\n- */\n-class ExampleUnitTest {\n-    @Test\n-    fun addition_isCorrect() {\n-        assertEquals(4, 2 + 2)\n-    }\n-}"},{"sha":"25055a8afb84980f2a7c192c4b15bb6836e1c41a","filename":"app/src/test/java/com/phellipesilva/coolposts/postlist/service/PostServiceTest.kt","status":"added","additions":139,"changes":139,"patch":"@@ -0,0 +1,139 @@\n+package com.phellipesilva.coolposts.postlist.service\n+\n+import com.phellipesilva.coolposts.postlist.service.entities.CommentRemoteEntity\n+import com.phellipesilva.coolposts.postlist.service.entities.PostRemoteEntity\n+import com.phellipesilva.coolposts.postlist.service.entities.UserRemoteEntity\n+import okhttp3.OkHttpClient\n+import org.junit.Before\n+import retrofit2.Retrofit\n+import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory\n+import retrofit2.converter.moshi.MoshiConverterFactory\n+import io.reactivex.observers.TestObserver\n+import okhttp3.mockwebserver.MockResponse\n+import okhttp3.mockwebserver.MockWebServer\n+import org.junit.After\n+import org.junit.Test\n+\n+class PostServiceTest {\n+\n+    private lateinit var server: MockWebServer\n+    private lateinit var postService: PostService\n+\n+    @Before\n+    fun setUp() {\n+        server \u003d MockWebServer()\n+        server.start(4040)\n+        server.url(\"/latest?base\u003dEUR\")\n+\n+         postService \u003d Retrofit.Builder()\n+            .baseUrl(\"http://localhost:4040\")\n+            .client(OkHttpClient.Builder().build())\n+            .addConverterFactory(MoshiConverterFactory.create())\n+            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n+            .build()\n+            .create(PostService::class.java)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        server.shutdown()\n+    }\n+\n+    @Test\n+    fun shouldParsePostsCorrectlyWhenRequestingAllPostsFromService() {\n+        val testObserver \u003d TestObserver\u003cList\u003cPostRemoteEntity\u003e\u003e()\n+        val json \u003d readJsonFromResources(\"json/posts_response.json\")\n+        val mockResponse \u003d MockResponse().setBody(json)\n+        server.enqueue(mockResponse)\n+\n+        val postsObservable \u003d postService.getPosts()\n+        postsObservable.subscribe(testObserver)\n+\n+        testObserver.assertNoErrors()\n+        testObserver.assertValue { it.size \u003d\u003d 2 }\n+        testObserver.assertValue {\n+            it[0] \u003d\u003d PostRemoteEntity(\n+                userId \u003d 1,\n+                id \u003d 1,\n+                title \u003d \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n+                body \u003d \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n+            )\n+        }\n+        testObserver.assertValue {\n+            it[1] \u003d\u003d PostRemoteEntity(\n+                userId \u003d 1,\n+                id \u003d 2,\n+                title \u003d \"qui est esse\",\n+                body \u003d \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n+            )\n+        }\n+    }\n+\n+    @Test\n+    fun shouldParseUsersCorrectlyWhenRequestingAllUsersFromService() {\n+        val testObserver \u003d TestObserver\u003cList\u003cUserRemoteEntity\u003e\u003e()\n+        val json \u003d readJsonFromResources(\"json/users_response.json\")\n+        val mockResponse \u003d MockResponse().setBody(json)\n+        server.enqueue(mockResponse)\n+\n+        val userObservable \u003d postService.getUsers()\n+        userObservable.subscribe(testObserver)\n+\n+        testObserver.assertNoErrors()\n+        testObserver.assertValue { it.size \u003d\u003d 2 }\n+        testObserver.assertValue {\n+            it[0] \u003d\u003d UserRemoteEntity(\n+                id \u003d 1,\n+                name \u003d \"Leanne Graham\",\n+                website \u003d \"hildegard.org\"\n+            )\n+        }\n+        testObserver.assertValue {\n+            it[1] \u003d\u003d UserRemoteEntity(\n+                id \u003d 2,\n+                name \u003d \"Ervin Howell\",\n+                website \u003d \"anastasia.net\"\n+            )\n+        }\n+    }\n+\n+    @Test\n+    fun shouldParseCommentsCorrectlyWhenRequestingCommentsOfSpecificPostFromService() {\n+        val testObserver \u003d TestObserver\u003cList\u003cCommentRemoteEntity\u003e\u003e()\n+        val json \u003d readJsonFromResources(\"json/comments_response.json\")\n+        val mockResponse \u003d MockResponse().setBody(json)\n+        server.enqueue(mockResponse)\n+\n+        val commentObservable \u003d postService.getComments(1)\n+        commentObservable.subscribe(testObserver)\n+\n+        testObserver.assertNoErrors()\n+        testObserver.assertValue { it.size \u003d\u003d 2 }\n+        testObserver.assertValue {\n+            it[0] \u003d\u003d CommentRemoteEntity(\n+                postId \u003d 1,\n+                id \u003d 1,\n+                name \u003d \"id labore ex et quam laborum\",\n+                email \u003d \"Eliseo@gardner.biz\",\n+                body \u003d \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\n+            )\n+        }\n+        testObserver.assertValue {\n+            it[1] \u003d\u003d CommentRemoteEntity(\n+                postId \u003d 1,\n+                id \u003d 2,\n+                name \u003d \"quo vero reiciendis velit similique earum\",\n+                email \u003d \"Jayne_Kuhic@sydney.com\",\n+                body \u003d \"est natus enim nihil est dolore omnis voluptatem numquam\\net omnis occaecati quod ullam at\\nvoluptatem error expedita pariatur\\nnihil sint nostrum voluptatem reiciendis et\"\n+            )\n+        }\n+\n+    }\n+\n+    private fun readJsonFromResources(filePath: String): String {\n+        return this.javaClass\n+            .classLoader\n+            ?.getResourceAsStream(filePath)\n+            ?.bufferedReader().use { it!!.readText() }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"a503b4a929356312e664555abc2d5823a1f04a5b","filename":"app/src/test/resources/json/comments_response.json","status":"added","additions":16,"changes":16,"patch":"@@ -0,0 +1,16 @@\n+[\n+  {\n+    \"postId\": 1,\n+    \"id\": 1,\n+    \"name\": \"id labore ex et quam laborum\",\n+    \"email\": \"Eliseo@gardner.biz\",\n+    \"body\": \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\n+  },\n+  {\n+    \"postId\": 1,\n+    \"id\": 2,\n+    \"name\": \"quo vero reiciendis velit similique earum\",\n+    \"email\": \"Jayne_Kuhic@sydney.com\",\n+    \"body\": \"est natus enim nihil est dolore omnis voluptatem numquam\\net omnis occaecati quod ullam at\\nvoluptatem error expedita pariatur\\nnihil sint nostrum voluptatem reiciendis et\"\n+  }\n+]\n\\ No newline at end of file"},{"sha":"4e37582731c31235dfd820f72142a2c7dcccf655","filename":"app/src/test/resources/json/posts_response.json","status":"added","additions":14,"changes":14,"patch":"@@ -0,0 +1,14 @@\n+[\n+  {\n+    \"userId\": 1,\n+    \"id\": 1,\n+    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n+    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n+  },\n+  {\n+    \"userId\": 1,\n+    \"id\": 2,\n+    \"title\": \"qui est esse\",\n+    \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n+  }\n+]\n\\ No newline at end of file"},{"sha":"94e9a34fdfef0d2c7e8a7a21ce86a6b45007dcea","filename":"app/src/test/resources/json/users_response.json","status":"added","additions":48,"changes":48,"patch":"@@ -0,0 +1,48 @@\n+[\n+  {\n+    \"id\": 1,\n+    \"name\": \"Leanne Graham\",\n+    \"username\": \"Bret\",\n+    \"email\": \"Sincere@april.biz\",\n+    \"address\": {\n+      \"street\": \"Kulas Light\",\n+      \"suite\": \"Apt. 556\",\n+      \"city\": \"Gwenborough\",\n+      \"zipcode\": \"92998-3874\",\n+      \"geo\": {\n+        \"lat\": \"-37.3159\",\n+        \"lng\": \"81.1496\"\n+      }\n+    },\n+    \"phone\": \"1-770-736-8031 x56442\",\n+    \"website\": \"hildegard.org\",\n+    \"company\": {\n+      \"name\": \"Romaguera-Crona\",\n+      \"catchPhrase\": \"Multi-layered client-server neural-net\",\n+      \"bs\": \"harness real-time e-markets\"\n+    }\n+  },\n+  {\n+    \"id\": 2,\n+    \"name\": \"Ervin Howell\",\n+    \"username\": \"Antonette\",\n+    \"email\": \"Shanna@melissa.tv\",\n+    \"address\": {\n+      \"street\": \"Victor Plains\",\n+      \"suite\": \"Suite 879\",\n+      \"city\": \"Wisokyburgh\",\n+      \"zipcode\": \"90566-7771\",\n+      \"geo\": {\n+        \"lat\": \"-43.9509\",\n+        \"lng\": \"-34.4618\"\n+      }\n+    },\n+    \"phone\": \"010-692-6593 x09125\",\n+    \"website\": \"anastasia.net\",\n+    \"company\": {\n+      \"name\": \"Deckow-Crist\",\n+      \"catchPhrase\": \"Proactive didactic contingency\",\n+      \"bs\": \"synergize scalable supply-chains\"\n+    }\n+  }\n+]\n\\ No newline at end of file"},{"sha":"88ff4dee2659dbdb6662c87e4fc213ff2c7239f2","filename":"build.gradle","status":"modified","additions":1,"changes":1,"patch":"@@ -17,6 +17,7 @@ buildscript {\n \n allprojects {\n     repositories {\n+        maven { url \u0027https://jitpack.io\u0027 }\n         google()\n         jcenter()\n         "}]}