{"sha":"bc1fa346b9d18e098faac74183cf7c3767197387","commit":{"url":"https://api.github.com/repos/simplaapliko/strava-api/git/commits/bc1fa346b9d18e098faac74183cf7c3767197387","message":"migrate from gson to moshi"},"url":"https://api.github.com/repos/simplaapliko/strava-api/commits/bc1fa346b9d18e098faac74183cf7c3767197387","files":[{"sha":"be3879fb947fd808213d6eab1074bae953339926","filename":"build.gradle","status":"modified","additions":7,"changes":8,"patch":"@@ -40,6 +40,7 @@ buildscript {\n   ext.versions \u003d [\n       \u0027dagger\u0027  : \u00272.20\u0027,\n       \u0027kotlin\u0027  : \u00271.3.11\u0027,\n+      \u0027moshi\u0027   : \u00271.8.0\u0027,\n       \u0027okHttp\u0027  : \u00273.12.1\u0027,\n       \u0027retrofit\u0027: \u00272.5.0\u0027,\n   ]\n@@ -62,13 +63,18 @@ buildscript {\n           \u0027runtime\u0027 : \"com.google.dagger:dagger:${versions.dagger}\",\n           \u0027compiler\u0027: \"com.google.dagger:dagger-compiler:${versions.dagger}\",\n       ],\n-      \u0027gson\u0027           : \"com.google.code.gson:gson:2.8.5\",\n       \u0027javaxannotation\u0027: \"javax.annotation:jsr250-api:1.0\",\n       \u0027kotlin\u0027         : [\n           \u0027stdlib\u0027: [\n               \u0027jdk\u0027: \"org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}\",\n           ],\n       ],\n+      \u0027moshi\u0027         : [\n+          \u0027adapters\u0027   : \"com.squareup.moshi:moshi-adapters:${versions.moshi}\",\n+          \u0027compiler\u0027   : \"com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}\",\n+          \u0027kotlin\u0027     : \"com.squareup.moshi:moshi-kotlin:${versions.moshi}\",\n+          \u0027runtime\u0027    : \"com.squareup.moshi:moshi:${versions.moshi}\",\n+      ],\n       \u0027okhttp\u0027         : [\n           \u0027client\u0027 : \"com.squareup.okhttp3:okhttp:${versions.okHttp}\",\n           \u0027logging\u0027: \"com.squareup.okhttp3:logging-interceptor:${versions.okHttp}\","},{"sha":"86396ceb5d0064bd5e766a20c8f5f131b5eff1fd","filename":"strava_api/build.gradle","status":"modified","additions":4,"changes":5,"patch":"@@ -40,7 +40,10 @@ android {\n dependencies {\n   implementation deps.kotlin.stdlib.jdk\n \n-  implementation deps.gson\n+  implementation deps.moshi.adapters\n+  implementation deps.moshi.kotlin\n+  implementation deps.moshi.runtime\n+  kapt deps.moshi.compiler\n \n   implementation deps.okhttp.client\n   implementation deps.okhttp.logging"},{"sha":"390630a1c3e7c9a3860a406ff4f76b9b0e94ec8c","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/GsonUtils.kt","status":"removed","additions":0,"changes":46,"patch":"@@ -1,46 +0,0 @@\n-/*\n- * Copyright (C) 2018 Oleg Kan\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.simplaapliko.strava.gson\n-\n-import com.google.gson.Gson\n-import com.google.gson.GsonBuilder\n-import com.simplaapliko.strava.gson.serializer.FrameTypeSerializer\n-import com.simplaapliko.strava.gson.serializer.FriendStateSerializer\n-import com.simplaapliko.strava.gson.serializer.MeasurementPreferenceSerializer\n-import com.simplaapliko.strava.gson.serializer.ResourceStateSerializer\n-import com.simplaapliko.strava.gson.serializer.SexTypeSerializer\n-import com.simplaapliko.strava.gson.serializer.SportTypeSerializer\n-import com.simplaapliko.strava.model.FrameType\n-import com.simplaapliko.strava.model.FriendState\n-import com.simplaapliko.strava.model.MeasurementPreference\n-import com.simplaapliko.strava.model.ResourceState\n-import com.simplaapliko.strava.model.Sex\n-import com.simplaapliko.strava.model.SportType\n-\n-object GsonUtils {\n-\n-    fun gson(): Gson {\n-        return GsonBuilder()\n-                .registerTypeAdapter(FrameType::class.java, FrameTypeSerializer())\n-                .registerTypeAdapter(FriendState::class.java, FriendStateSerializer())\n-                .registerTypeAdapter(MeasurementPreference::class.java, MeasurementPreferenceSerializer())\n-                .registerTypeAdapter(ResourceState::class.java, ResourceStateSerializer())\n-                .registerTypeAdapter(Sex::class.java, SexTypeSerializer())\n-                .registerTypeAdapter(SportType::class.java, SportTypeSerializer())\n-                .create()\n-    }\n-}"},{"sha":"68826c2a376ec652fcac0cb08fed9165981c56ff","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/JsonUtils.kt","status":"added","additions":50,"changes":50,"patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2018 Oleg Kan\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.simplaapliko.strava.gson\n+\n+import com.simplaapliko.strava.gson.serializer.FrameTypeAdapter\n+import com.simplaapliko.strava.gson.serializer.FriendStateAdapter\n+import com.simplaapliko.strava.gson.serializer.MeasurementPreferenceAdapter\n+import com.simplaapliko.strava.gson.serializer.ResourceStateAdapter\n+import com.simplaapliko.strava.gson.serializer.SexAdapter\n+import com.simplaapliko.strava.gson.serializer.SportTypeAdapter\n+import com.simplaapliko.strava.model.FrameType\n+import com.simplaapliko.strava.model.FriendState\n+import com.simplaapliko.strava.model.MeasurementPreference\n+import com.simplaapliko.strava.model.ResourceState\n+import com.simplaapliko.strava.model.Sex\n+import com.simplaapliko.strava.model.SportType\n+import com.squareup.moshi.Moshi\n+import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter\n+import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory\n+import java.util.Date\n+\n+object JsonUtils {\n+\n+    fun moshi(): Moshi {\n+        return Moshi.Builder()\n+                .add(KotlinJsonAdapterFactory())\n+                .add(Date::class.java, Rfc3339DateJsonAdapter())\n+                .add(FrameType::class.java, FrameTypeAdapter())\n+                .add(FriendState::class.java, FriendStateAdapter())\n+                .add(MeasurementPreference::class.java, MeasurementPreferenceAdapter())\n+                .add(ResourceState::class.java, ResourceStateAdapter())\n+                .add(Sex::class.java, SexAdapter())\n+                .add(SportType::class.java, SportTypeAdapter())\n+                .build()\n+    }\n+}"},{"sha":"aae78d412cba8697c520ae9193a4c85597ab96fd","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/FrameTypeAdapter.kt","status":"renamed","additions":13,"changes":28,"patch":"@@ -16,25 +16,23 @@\n \n package com.simplaapliko.strava.gson.serializer\n \n-import com.google.gson.JsonDeserializationContext\n-import com.google.gson.JsonDeserializer\n-import com.google.gson.JsonElement\n-import com.google.gson.JsonSerializationContext\n-import com.google.gson.JsonSerializer\n import com.simplaapliko.strava.model.FrameType\n-import java.lang.reflect.Type\n+import com.squareup.moshi.JsonAdapter\n+import com.squareup.moshi.JsonReader\n+import com.squareup.moshi.JsonWriter\n \n-class FrameTypeSerializer : JsonDeserializer\u003cFrameType\u003e, JsonSerializer\u003cFrameType\u003e {\n+class FrameTypeAdapter : JsonAdapter\u003cFrameType\u003e() {\n \n-    override fun deserialize(\n-        json: JsonElement, typeOfT: Type, context: JsonDeserializationContext\n-    ): FrameType {\n-        return FrameType.byId(json.asInt)\n+    override fun fromJson(reader: JsonReader): FrameType {\n+        return if (reader.peek() \u003d\u003d JsonReader.Token.NULL) {\n+            reader.nextNull\u003cUnit\u003e()\n+            FrameType.UNKNOWN\n+        } else {\n+            FrameType.byId(reader.nextInt())\n+        }\n     }\n \n-    override fun serialize(\n-        src: FrameType, typeOfSrc: Type, context: JsonSerializationContext\n-    ): JsonElement {\n-        return context.serialize(src.id)\n+    override fun toJson(writer: JsonWriter, value: FrameType?) {\n+        writer.value(value?.id)\n     }\n }"},{"sha":"8e1de85b8ef6d2c0a63bb600b2cebb936d436a41","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/FriendStateAdapter.kt","status":"renamed","additions":13,"changes":28,"patch":"@@ -16,25 +16,23 @@\n \n package com.simplaapliko.strava.gson.serializer\n \n-import com.google.gson.JsonDeserializationContext\n-import com.google.gson.JsonDeserializer\n-import com.google.gson.JsonElement\n-import com.google.gson.JsonSerializationContext\n-import com.google.gson.JsonSerializer\n import com.simplaapliko.strava.model.FriendState\n-import java.lang.reflect.Type\n+import com.squareup.moshi.JsonAdapter\n+import com.squareup.moshi.JsonReader\n+import com.squareup.moshi.JsonWriter\n \n-class FriendStateSerializer : JsonDeserializer\u003cFriendState\u003e, JsonSerializer\u003cFriendState\u003e {\n+class FriendStateAdapter : JsonAdapter\u003cFriendState\u003e() {\n \n-    override fun deserialize(\n-        json: JsonElement, typeOfT: Type, context: JsonDeserializationContext\n-    ): FriendState {\n-        return FriendState.byId(json.asString)\n+    override fun fromJson(reader: JsonReader): FriendState {\n+        return if (reader.peek() \u003d\u003d JsonReader.Token.NULL) {\n+            reader.nextNull\u003cUnit\u003e()\n+            FriendState.UNKNOWN\n+        } else {\n+            FriendState.byId(reader.nextString())\n+        }\n     }\n \n-    override fun serialize(\n-        src: FriendState, typeOfSrc: Type, context: JsonSerializationContext\n-    ): JsonElement {\n-        return context.serialize(src.id)\n+    override fun toJson(writer: JsonWriter, value: FriendState?) {\n+        writer.value(value?.id)\n     }\n }"},{"sha":"ce5efc1169fe31fe11abfa08a3e9956d2dae6fc4","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/MeasurementPreferenceAdapter.kt","status":"added","additions":38,"changes":38,"patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (C) 2018 Oleg Kan\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.simplaapliko.strava.gson.serializer\n+\n+import com.simplaapliko.strava.model.MeasurementPreference\n+import com.squareup.moshi.JsonAdapter\n+import com.squareup.moshi.JsonReader\n+import com.squareup.moshi.JsonWriter\n+\n+class MeasurementPreferenceAdapter : JsonAdapter\u003cMeasurementPreference\u003e() {\n+\n+    override fun fromJson(reader: JsonReader): MeasurementPreference {\n+        return if (reader.peek() \u003d\u003d JsonReader.Token.NULL) {\n+            reader.nextNull\u003cUnit\u003e()\n+            MeasurementPreference.UNKNOWN\n+        } else {\n+            MeasurementPreference.byId(reader.nextString())\n+        }\n+    }\n+\n+    override fun toJson(writer: JsonWriter, value: MeasurementPreference?) {\n+        writer.value(value?.id)\n+    }\n+}"},{"sha":"7b6b5f433e8f87e0a1a917647f43b3ae1db90de9","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/MeasurementPreferenceSerializer.kt","status":"removed","additions":0,"changes":40,"patch":"@@ -1,40 +0,0 @@\n-/*\n- * Copyright (C) 2018 Oleg Kan\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.simplaapliko.strava.gson.serializer\n-\n-import com.google.gson.JsonDeserializationContext\n-import com.google.gson.JsonDeserializer\n-import com.google.gson.JsonElement\n-import com.google.gson.JsonSerializationContext\n-import com.google.gson.JsonSerializer\n-import com.simplaapliko.strava.model.MeasurementPreference\n-import java.lang.reflect.Type\n-\n-class MeasurementPreferenceSerializer : JsonDeserializer\u003cMeasurementPreference\u003e, JsonSerializer\u003cMeasurementPreference\u003e {\n-\n-    override fun deserialize(\n-        json: JsonElement, typeOfT: Type, context: JsonDeserializationContext\n-    ): MeasurementPreference {\n-        return MeasurementPreference.byId(json.asString)\n-    }\n-\n-    override fun serialize(\n-        src: MeasurementPreference, typeOfSrc: Type, context: JsonSerializationContext\n-    ): JsonElement {\n-        return context.serialize(src.id)\n-    }\n-}"},{"sha":"e1b687f30b1ad4cadb0a1afcf8ec1ec3feca7ff4","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/ResourceStateAdapter.kt","status":"renamed","additions":13,"changes":28,"patch":"@@ -16,25 +16,23 @@\n \n package com.simplaapliko.strava.gson.serializer\n \n-import com.google.gson.JsonDeserializationContext\n-import com.google.gson.JsonDeserializer\n-import com.google.gson.JsonElement\n-import com.google.gson.JsonSerializationContext\n-import com.google.gson.JsonSerializer\n import com.simplaapliko.strava.model.ResourceState\n-import java.lang.reflect.Type\n+import com.squareup.moshi.JsonAdapter\n+import com.squareup.moshi.JsonReader\n+import com.squareup.moshi.JsonWriter\n \n-class ResourceStateSerializer : JsonDeserializer\u003cResourceState\u003e, JsonSerializer\u003cResourceState\u003e {\n+class ResourceStateAdapter : JsonAdapter\u003cResourceState\u003e() {\n \n-    override fun deserialize(\n-        json: JsonElement, typeOfT: Type, context: JsonDeserializationContext\n-    ): ResourceState {\n-        return ResourceState.byId(json.asInt)\n+    override fun fromJson(reader: JsonReader): ResourceState {\n+        return if (reader.peek() \u003d\u003d JsonReader.Token.NULL) {\n+            reader.nextNull\u003cUnit\u003e()\n+            ResourceState.UNKNOWN\n+        } else {\n+            ResourceState.byId(reader.nextInt())\n+        }\n     }\n \n-    override fun serialize(\n-        src: ResourceState, typeOfSrc: Type, context: JsonSerializationContext\n-    ): JsonElement {\n-        return context.serialize(src.id)\n+    override fun toJson(writer: JsonWriter, value: ResourceState?) {\n+        writer.value(value?.id)\n     }\n }"},{"sha":"a678d18fc26c2193f7bf3d0b1a3aa7ca88019cce","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/SexAdapter.kt","status":"renamed","additions":13,"changes":24,"patch":"@@ -16,21 +16,23 @@\n \n package com.simplaapliko.strava.gson.serializer\n \n-import com.google.gson.*\n import com.simplaapliko.strava.model.Sex\n-import java.lang.reflect.Type\n+import com.squareup.moshi.JsonAdapter\n+import com.squareup.moshi.JsonReader\n+import com.squareup.moshi.JsonWriter\n \n-class SexTypeSerializer : JsonDeserializer\u003cSex\u003e, JsonSerializer\u003cSex\u003e {\n+class SexAdapter : JsonAdapter\u003cSex\u003e() {\n \n-    override fun deserialize(\n-        json: JsonElement, typeOfT: Type, context: JsonDeserializationContext\n-    ): Sex {\n-        return Sex.byId(json.asString)\n+    override fun fromJson(reader: JsonReader): Sex {\n+        return if (reader.peek() \u003d\u003d JsonReader.Token.NULL) {\n+            reader.nextNull\u003cUnit\u003e()\n+            Sex.UNKNOWN\n+        } else {\n+            Sex.byId(reader.nextString())\n+        }\n     }\n \n-    override fun serialize(\n-        src: Sex, typeOfSrc: Type, context: JsonSerializationContext\n-    ): JsonElement {\n-        return context.serialize(src.id)\n+    override fun toJson(writer: JsonWriter, value: Sex?) {\n+        writer.value(value?.id)\n     }\n }"},{"sha":"3448c02eef4c89fa026e276c2cdacd8858262803","filename":"strava_api/src/main/java/com/simplaapliko/strava/gson/serializer/SportTypeAdapter.kt","status":"renamed","additions":13,"changes":24,"patch":"@@ -16,21 +16,23 @@\n \n package com.simplaapliko.strava.gson.serializer\n \n-import com.google.gson.*\n import com.simplaapliko.strava.model.SportType\n-import java.lang.reflect.Type\n+import com.squareup.moshi.JsonAdapter\n+import com.squareup.moshi.JsonReader\n+import com.squareup.moshi.JsonWriter\n \n-class SportTypeSerializer : JsonDeserializer\u003cSportType\u003e, JsonSerializer\u003cSportType\u003e {\n+class SportTypeAdapter : JsonAdapter\u003cSportType\u003e() {\n \n-    override fun deserialize(\n-        json: JsonElement, typeOfT: Type, context: JsonDeserializationContext\n-    ): SportType {\n-        return SportType.byId(json.asString)\n+    override fun fromJson(reader: JsonReader): SportType {\n+        return if (reader.peek() \u003d\u003d JsonReader.Token.NULL) {\n+            reader.nextNull\u003cUnit\u003e()\n+            SportType.UNKNOWN\n+        } else {\n+            SportType.byId(reader.nextString())\n+        }\n     }\n \n-    override fun serialize(\n-        src: SportType, typeOfSrc: Type, context: JsonSerializationContext\n-    ): JsonElement {\n-        return context.serialize(src.id)\n+    override fun toJson(writer: JsonWriter, value: SportType?) {\n+        writer.value(value?.id)\n     }\n }"},{"sha":"dcd20b182e5f66482636eb51b8c6e98ac329adab","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/ActivityStats.kt","status":"modified","additions":12,"changes":24,"patch":"@@ -16,73 +16,73 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class ActivityStats(\n     /**\n      * The longest distance ridden by the athlete.\n      */\n-    @SerializedName(\"biggest_ride_distance\")\n+    @Json(name \u003d \"biggest_ride_distance\")\n     var biggestRideDistance: Double \u003d 0.0,\n \n     /**\n      * The highest climb ridden by the athlete.\n      */\n-    @SerializedName(\"biggest_climb_elevation_gain\")\n+    @Json(name \u003d\"biggest_climb_elevation_gain\")\n     var biggestClimbElevationGain: Double \u003d 0.0,\n \n     /**\n      * The recent (last 4 weeks) ride stats for the athlete.\n      */\n-    @SerializedName(\"recent_ride_totals\")\n+    @Json(name \u003d\"recent_ride_totals\")\n     var recentRideTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The recent (last 4 weeks) run stats for the athlete.\n      */\n-    @SerializedName(\"recent_run_totals\")\n+    @Json(name \u003d\"recent_run_totals\")\n     var recentRunTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The recent (last 4 weeks) swim stats for the athlete.\n      */\n-    @SerializedName(\"recent_swim_totals\")\n+    @Json(name \u003d\"recent_swim_totals\")\n     var recentSwimTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The year to date ride stats for the athlete.\n      */\n-    @SerializedName(\"ytd_ride_totals\")\n+    @Json(name \u003d\"ytd_ride_totals\")\n     var ytdRideTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The year to date run stats for the athlete.\n      */\n-    @SerializedName(\"ytd_run_totals\")\n+    @Json(name \u003d\"ytd_run_totals\")\n     var ytdRunTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The year to date swim stats for the athlete.\n      */\n-    @SerializedName(\"ytd_swim_totals\")\n+    @Json(name \u003d\"ytd_swim_totals\")\n     var ytdSwimTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The all time ride stats for the athlete.\n      */\n-    @SerializedName(\"all_ride_totals\")\n+    @Json(name \u003d\"all_ride_totals\")\n     var allRideTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The all time run stats for the athlete.\n      */\n-    @SerializedName(\"all_run_totals\")\n+    @Json(name \u003d\"all_run_totals\")\n     var allRunTotals: ActivityTotal? \u003d null,\n \n     /**\n      * The all time swim stats for the athlete.\n      */\n-    @SerializedName(\"all_swim_totals\")\n+    @Json(name \u003d\"all_swim_totals\")\n     var allSwimTotals: ActivityTotal? \u003d null\n \n ) : StravaResponse()"},{"sha":"7427b98069dc083f8a15b61ef9cbf9d9c099af04","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/ActivityTotal.kt","status":"modified","additions":7,"changes":14,"patch":"@@ -16,42 +16,42 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class ActivityTotal(\n     /**\n      * The number of activities considered in this total.\n      */\n-    @SerializedName(\"count\")\n+    @Json(name \u003d\"count\")\n     var count: Int \u003d 0,\n \n     /**\n      * The total distance covered by the considered activities.\n      */\n-    @SerializedName(\"distance\")\n+    @Json(name \u003d\"distance\")\n     var distance: Double \u003d 0.0,\n \n     /**\n      * The total moving time of the considered activities.\n      */\n-    @SerializedName(\"moving_time\")\n+    @Json(name \u003d\"moving_time\")\n     var movingTime: Int \u003d 0,\n \n     /**\n      * The total elapsed time of the considered activities.\n      */\n-    @SerializedName(\"elapsed_time\")\n+    @Json(name \u003d\"elapsed_time\")\n     var elapsedTime: Int \u003d 0,\n \n     /**\n      * The total elevation gain of the considered activities.\n      */\n-    @SerializedName(\"elevation_gain\")\n+    @Json(name \u003d\"elevation_gain\")\n     var elevationGain: Double \u003d 0.0,\n \n     /**\n      * The total number of achievements of the considered activities.\n      */\n-    @SerializedName(\"achievement_count\")\n+    @Json(name \u003d\"achievement_count\")\n     var achievementCount: Int \u003d 0\n )"},{"sha":"a3e5a30cc59d17f7210c2cd7cc0b70de2294b85d","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/Athlete.kt","status":"modified","additions":26,"changes":52,"patch":"@@ -16,164 +16,164 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n import java.util.Date\n \n data class Athlete(\n     // region Summary Athlete\n     /**\n      * The unique identifier of the athlete\n      */\n-    @SerializedName(\"id\")\n+    @Json(name \u003d\"id\")\n     var id: Int \u003d 0,\n \n     /**\n      * Resource state, indicates level of detail.\n      * Possible values: 1 -\u003e \"meta\", 2 -\u003e \"summary\", 3 -\u003e \"detail\"\n      */\n-    @SerializedName(\"resource_state\")\n+    @Json(name \u003d\"resource_state\")\n     var resourceState: ResourceState \u003d ResourceState.UNKNOWN,\n \n     /**\n      * The athlete\u0027s first name.\n      */\n-    @SerializedName(\"firstname\")\n+    @Json(name \u003d\"firstname\")\n     var firstName: String \u003d \"\",\n \n     /**\n      * The athlete\u0027s last name.\n      */\n-    @SerializedName(\"lastname\")\n+    @Json(name \u003d\"lastname\")\n     var lastName: String \u003d \"\",\n \n     /**\n      * URL to a 62x62 pixel profile picture.\n      */\n-    @SerializedName(\"profile_medium\")\n+    @Json(name \u003d\"profile_medium\")\n     var profileMedium: String \u003d \"\",\n \n     /**\n      * URL to a 124x124 pixel profile picture.\n      */\n-    @SerializedName(\"profile\")\n+    @Json(name \u003d\"profile\")\n     var profile: String \u003d \"\",\n \n     /**\n      * The athlete\u0027s city.\n      */\n-    @SerializedName(\"city\")\n+    @Json(name \u003d\"city\")\n     var city: String \u003d \"\",\n \n     /**\n      * The athlete\u0027s state or geographical region.\n      */\n-    @SerializedName(\"state\")\n+    @Json(name \u003d\"state\")\n     var state: String \u003d \"\",\n \n     /**\n      * The athlete\u0027s country.\n      */\n-    @SerializedName(\"country\")\n+    @Json(name \u003d\"country\")\n     var country: String \u003d \"\",\n \n     /**\n      * The athlete\u0027s sex. May take one of the following values: M, F\n      */\n-    @SerializedName(\"sex\")\n+    @Json(name \u003d\"sex\")\n     var sex: Sex \u003d Sex.UNKNOWN,\n \n     /**\n      * Whether the currently logged-in athlete follows this athlete.\n      * May take one of the following values: pending, accepted, blocked\n      */\n-    @SerializedName(\"friend\")\n+    @Json(name \u003d\"friend\")\n     var friend: FriendState \u003d FriendState.UNKNOWN,\n \n     /**\n      * Whether this athlete follows the currently logged-in athlete.\n      * May take one of the following values: pending, accepted, blocked\n      */\n-    @SerializedName(\"follower\")\n+    @Json(name \u003d\"follower\")\n     var follower: FriendState \u003d FriendState.UNKNOWN,\n \n     /**\n      * Deprecated. Use summit field instead. Whether the athlete has any Summit subscription.\n      */\n-    @SerializedName(\"premium\")\n+    @Json(name \u003d\"premium\")\n     var premium: Boolean \u003d false,\n \n     /**\n      * Whether the athlete has any Summit subscription.\n      */\n-    @SerializedName(\"summit\")\n+    @Json(name \u003d\"summit\")\n     var summit: Boolean \u003d false,\n \n     /**\n      * The time at which the athlete was created.\n      */\n-    @SerializedName(\"created_at\")\n+    @Json(name \u003d\"created_at\")\n     var createdAt: Date? \u003d null,\n \n     /**\n      * The time at which the athlete was last updated.\n      */\n-    @SerializedName(\"updated_at\")\n+    @Json(name \u003d\"updated_at\")\n     var updatedAt: Date? \u003d null,\n     // endregion Summary Athlete\n \n     // region Detailed Athlete\n     /**\n      * The athlete\u0027s follower count.\n      */\n-    @SerializedName(\"follower_count\")\n+    @Json(name \u003d\"follower_count\")\n     var followerCount: Int \u003d 0,\n \n     /**\n      * The athlete\u0027s friend count.\n      */\n-    @SerializedName(\"friend_count\")\n+    @Json(name \u003d\"friend_count\")\n     var friendCount: Int \u003d 0,\n \n     /**\n      * The number or athletes mutually followed by this athlete and the currently logged-in athlete.\n      */\n-    @SerializedName(\"mutual_friend_count\")\n+    @Json(name \u003d\"mutual_friend_count\")\n     var mutualFriendCount: Int \u003d 0,\n \n     /**\n      * The athlete\u0027s preferred unit system. May take one of the following values: feet, meters\n      */\n-    @SerializedName(\"measurement_preference\")\n+    @Json(name \u003d\"measurement_preference\")\n     var measurementPreference: MeasurementPreference \u003d MeasurementPreference.UNKNOWN,\n \n     /**\n      * The athlete\u0027s FTP (Functional Threshold Power).\n      */\n-    @SerializedName(\"ftp\")\n+    @Json(name \u003d\"ftp\")\n     var ftp: Int \u003d 0,\n \n     /**\n      * The athlete\u0027s weight.\n      */\n-    @SerializedName(\"weight\")\n+    @Json(name \u003d\"weight\")\n     var weight: Double \u003d 0.0,\n \n     /**\n      * The athlete\u0027s clubs.\n      */\n-    @SerializedName(\"clubs\")\n+    @Json(name \u003d\"clubs\")\n     var clubs: List\u003cSummaryClub\u003e \u003d emptyList(),\n \n     /**\n      * The athlete\u0027s bikes.\n      */\n-    @SerializedName(\"bikes\")\n+    @Json(name \u003d\"bikes\")\n     var bikes: List\u003cSummaryGear\u003e \u003d emptyList(),\n \n     /**\n      * The athlete\u0027s shoes.\n      */\n-    @SerializedName(\"shoes\")\n+    @Json(name \u003d\"shoes\")\n     var shoes: List\u003cSummaryGear\u003e \u003d emptyList()\n     // endregion Detailed Athlete\n ) : StravaResponse()"},{"sha":"a49ac5854bc748de2d565e1bd2a7d3b38623eca5","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/DetailedGear.kt","status":"modified","additions":11,"changes":22,"patch":"@@ -16,60 +16,60 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class DetailedGear(\n     /**\n      * The gear\u0027s unique identifier.\n      */\n-    @SerializedName(\"id\")\n+    @Json(name \u003d\"id\")\n     var id: String \u003d \"\",\n \n     /**\n      * Resource state, indicates level of detail. Possible values: 2 -\u003e \"summary\", 3 -\u003e \"detail\"\n      */\n-    @SerializedName(\"resource_state\")\n+    @Json(name \u003d\"resource_state\")\n     var resourceState: ResourceState \u003d ResourceState.UNKNOWN,\n \n     /**\n      * Whether this gear\u0027s is the owner\u0027s default one.\n      */\n-    @SerializedName(\"primary\")\n+    @Json(name \u003d\"primary\")\n     var primary: Boolean \u003d false,\n \n     /**\n      * The gear\u0027s name.\n      */\n-    @SerializedName(\"name\")\n+    @Json(name \u003d\"name\")\n     var name: String \u003d \"\",\n \n     /**\n      * The distance logged with this gear.\n      */\n-    @SerializedName(\"distance\")\n+    @Json(name \u003d\"distance\")\n     var distance: Double \u003d 0.0,\n \n     /**\n      * The gear\u0027s brand name.\n      */\n-    @SerializedName(\"brand_name\")\n+    @Json(name \u003d\"brand_name\")\n     var brandName: String \u003d \"\",\n \n     /**\n      * The gear\u0027s model name.\n      */\n-    @SerializedName(\"model_name\")\n+    @Json(name \u003d\"model_name\")\n     var modelName: String \u003d \"\",\n \n     /**\n      * The gear\u0027s frame type (bike only).\n      */\n-    @SerializedName(\"frame_type\")\n-    var frameType: FrameType \u003d FrameType.UNKNOWN,\n+    @Json(name \u003d\"frame_type\")\n+    var frameType: FrameType? \u003d FrameType.UNKNOWN,\n \n     /**\n      * The gear\u0027s description.\n      */\n-    @SerializedName(\"description\")\n+    @Json(name \u003d\"description\")\n     var description: String \u003d \"\"\n ) : StravaResponse()"},{"sha":"12187936f3747d1e4483814cf9bb0be0843c78c1","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/Error.kt","status":"modified","additions":4,"changes":8,"patch":"@@ -1,23 +1,23 @@\n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class Error(\n     /**\n      * The code associated with this error.\n      */\n-    @SerializedName(\"code\")\n+    @Json(name \u003d\"code\")\n     var code: String \u003d \"\",\n \n     /**\n      * The specific field or aspect of the resource associated with this error.\n      */\n-    @SerializedName(\"field\")\n+    @Json(name \u003d\"field\")\n     var field: String \u003d \"\",\n \n     /**\n      * The type of resource associated with this error.\n      */\n-    @SerializedName(\"resource\")\n+    @Json(name \u003d\"resource\")\n     var resource: String \u003d \"\"\n )"},{"sha":"71ba181c5e15017c310f5640641375eb636b3aac","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/FrameType.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-enum class FrameType(val id: Int) {\n-    UNKNOWN(-1),\n+enum class FrameType(val id: Int?) {\n+    UNKNOWN(null),\n     MOUNTAIN(1),\n     CROSS(2),\n     ROAD(3),"},{"sha":"1a4dff275c0365587776f3d5c5f5e41c64e37554","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/FriendState.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-enum class FriendState(val id: String) {\n-    UNKNOWN(\"unknown\"),\n+enum class FriendState(val id: String?) {\n+    UNKNOWN(null),\n     ACCEPTED(\"accepted\"),\n     BLOCKED(\"blocked\"),\n     PENDING(\"pending\");"},{"sha":"a321ef70ede57288762c358bda23af07bd241eca","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/HeartRateZoneRanges.kt","status":"modified","additions":3,"changes":6,"patch":"@@ -16,19 +16,19 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class HeartRateZoneRanges(\n     /**\n      * Whether the athlete has set their own custom heart rate zones\n      */\n-    @SerializedName(\"custom_zones\")\n+    @Json(name \u003d\"custom_zones\")\n     var customZones: Boolean \u003d false,\n \n     /**\n      * A collection of ZoneRange objects.\n      * @see com.simplaapliko.strava.model.ZoneRange\n      */\n-    @SerializedName(\"zones\")\n+    @Json(name \u003d\"zones\")\n     var zones: List\u003cZoneRange\u003e \u003d emptyList()\n )"},{"sha":"d825cbf6be616e165d89d2ce6cc24e2e43833aed","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/MeasurementPreference.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-enum class MeasurementPreference(val id: String) {\n-    UNKNOWN(\"unknown\"),\n+enum class MeasurementPreference(val id: String?) {\n+    UNKNOWN(null),\n     FEET(\"feet\"),\n     METERS(\"meters\");\n "},{"sha":"bec17f834e17adb83cc5b068a9c606ac4df50d60","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/PowerZoneRanges.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,13 +16,13 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class PowerZoneRanges(\n     /**\n      * A collection of ZoneRange objects.\n      * @see com.simplaapliko.strava.model.ZoneRange\n      */\n-    @SerializedName(\"zones\")\n+    @Json(name \u003d\"zones\")\n     var zones: List\u003cZoneRange\u003e \u003d emptyList()\n )"},{"sha":"a4eab500a82391323f32eab4cc856d6e7d1ee87f","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/RefreshToken.kt","status":"modified","additions":5,"changes":10,"patch":"@@ -16,19 +16,19 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class RefreshToken(\n \n-    @SerializedName(\"token_type\")\n+    @Json(name \u003d\"token_type\")\n     var tokenType: String \u003d \"\",\n \n-    @SerializedName(\"access_token\")\n+    @Json(name \u003d\"access_token\")\n     var accessToken: String \u003d \"\",\n \n-    @SerializedName(\"refresh_token\")\n+    @Json(name \u003d\"refresh_token\")\n     var refreshToken: String \u003d \"\",\n \n-    @SerializedName(\"expires_at\")\n+    @Json(name \u003d\"expires_at\")\n     var expiresAt: Int \u003d 0\n )"},{"sha":"c299b1b096f4fe86f8d4a81da09259e4cd61d606","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/ResourceState.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-enum class ResourceState(val id: Int) {\n-    UNKNOWN(-1),\n+enum class ResourceState(val id: Int?) {\n+    UNKNOWN(null),\n     META(1),\n     SUMMARY(2),\n     DETAIL(3);"},{"sha":"eafb42af08971ab59190d2d9c1878fe0e830933b","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/Sex.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-enum class Sex(val id: String) {\n-    UNKNOWN(\"unknown\"),\n+enum class Sex(val id: String?) {\n+    UNKNOWN(null),\n     F(\"F\"),\n     M(\"M\");\n "},{"sha":"b5e641add8edbb733bafa82ed1f8ebcd60538cdf","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/SportType.kt","status":"modified","additions":2,"changes":4,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-enum class SportType(val id: String) {\n-    UNKNOWN(\"unknown\"),\n+enum class SportType(val id: String?) {\n+    UNKNOWN(null),\n     CYCLING(\"cycling\"),\n     RUNNING(\"running\"),\n     TRIATHLON(\"triathlon\"),"},{"sha":"cb16246b0c36ff5a99c87506986691739081d372","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/StravaResponse.kt","status":"modified","additions":3,"changes":6,"patch":"@@ -1,17 +1,17 @@\n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n abstract class StravaResponse {\n     /**\n      * The set of specific errors associated with this fault, if any.\n      */\n-    @SerializedName(\"errors\")\n+    @Json(name \u003d\"errors\")\n     var errors: List\u003cError\u003e? \u003d null\n \n     /**\n      * The message of the fault.\n      */\n-    @SerializedName(\"message\")\n+    @Json(name \u003d\"message\")\n     var errorMessage: String? \u003d null\n }"},{"sha":"5ae2a625e1200e8216205c7251fb75c5bfd64350","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/SummaryClub.kt","status":"modified","additions":16,"changes":32,"patch":"@@ -16,97 +16,97 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class SummaryClub(\n     /**\n      * The club\u0027s unique identifier.\n      */\n-    @SerializedName(\"id\")\n+    @Json(name \u003d\"id\")\n     var id: Int \u003d 0,\n \n     /**\n      * Resource state, indicates level of detail.\n      * Possible values: 1 -\u003e \"meta\", 2 -\u003e \"summary\", 3 -\u003e \"detail\"\n      */\n-    @SerializedName(\"resource_state\")\n+    @Json(name \u003d\"resource_state\")\n     var resourceState: ResourceState \u003d ResourceState.UNKNOWN,\n \n     /**\n      * The club\u0027s name.\n      */\n-    @SerializedName(\"name\")\n+    @Json(name \u003d\"name\")\n     var name: String \u003d \"\",\n \n     /**\n      * URL to a 60x60 pixel profile picture.\n      */\n-    @SerializedName(\"profile_medium\")\n+    @Json(name \u003d\"profile_medium\")\n     var profileMedium: String \u003d \"\",\n \n     /**\n      * URL to a ~1185x580 pixel cover photo.\n      */\n-    @SerializedName(\"cover_photo\")\n+    @Json(name \u003d\"cover_photo\")\n     var coverPhoto: String \u003d \"\",\n \n     /**\n      * URL to a ~360x176 pixel cover photo.\n      */\n-    @SerializedName(\"cover_photo_small\")\n+    @Json(name \u003d\"cover_photo_small\")\n     var coverPhotoSmall: String \u003d \"\",\n \n     /**\n      * May take one of the following values: cycling, running, triathlon, other\n      */\n-    @SerializedName(\"sport_type\")\n+    @Json(name \u003d\"sport_type\")\n     var sportType: SportType \u003d SportType.UNKNOWN,\n \n     /**\n      * The club\u0027s city.\n      */\n-    @SerializedName(\"city\")\n+    @Json(name \u003d\"city\")\n     var city: String \u003d \"\",\n \n     /**\n      * The club\u0027s state or geographical region.\n      */\n-    @SerializedName(\"state\")\n+    @Json(name \u003d\"state\")\n     var state: String \u003d \"\",\n \n     /**\n      * The club\u0027s country.\n      */\n-    @SerializedName(\"country\")\n+    @Json(name \u003d\"country\")\n     var country: String \u003d \"\",\n \n     /**\n      * Whether the club is private.\n      */\n-    @SerializedName(\"private\")\n+    @Json(name \u003d\"private\")\n     var private: Boolean \u003d false,\n \n     /**\n      * The club\u0027s member count.\n      */\n-    @SerializedName(\"member_count\")\n+    @Json(name \u003d\"member_count\")\n     var memberCount: Int \u003d 0,\n \n     /**\n      * Whether the club is featured or not.\n      */\n-    @SerializedName(\"featured\")\n+    @Json(name \u003d\"featured\")\n     var featured: Boolean \u003d false,\n \n     /**\n      * Whether the club is verified or not.\n      */\n-    @SerializedName(\"verified\")\n+    @Json(name \u003d\"verified\")\n     var verified: Boolean \u003d false,\n \n     /**\n      * The club\u0027s vanity URL.\n      */\n-    @SerializedName(\"url\")\n+    @Json(name \u003d\"url\")\n     var url: String \u003d \"\"\n )"},{"sha":"c3d4ee29d77234f82b3d3d1532a22435059dc770","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/SummaryGear.kt","status":"modified","additions":6,"changes":12,"patch":"@@ -16,37 +16,37 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class SummaryGear(\n     /**\n      * The gear\u0027s unique identifier.\n      */\n-    @SerializedName(\"id\")\n+    @Json(name \u003d\"id\")\n     var id: String \u003d \"\",\n \n     /**\n      * Resource state, indicates level of detail.\n      * Possible values: 2 -\u003e \"summary\", 3 -\u003e \"detail\"\n      */\n-    @SerializedName(\"resource_state\")\n+    @Json(name \u003d\"resource_state\")\n     var resourceState: ResourceState \u003d ResourceState.UNKNOWN,\n \n     /**\n      * Whether this gear\u0027s is the owner\u0027s default one.\n      */\n-    @SerializedName(\"primary\")\n+    @Json(name \u003d\"primary\")\n     var primary: Boolean \u003d false,\n \n     /**\n      * The gear\u0027s name.\n      */\n-    @SerializedName(\"name\")\n+    @Json(name \u003d\"name\")\n     var name: String \u003d \"\",\n \n     /**\n      * The distance logged with this gear.\n      */\n-    @SerializedName(\"distance\")\n+    @Json(name \u003d\"distance\")\n     var distance: Double \u003d 0.0\n )"},{"sha":"2f41d5d7b12e0abc318c1fb35df5abe0ae5522bd","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/Token.kt","status":"modified","additions":7,"changes":14,"patch":"@@ -16,25 +16,25 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class Token(\n \n-    @SerializedName(\"token_type\")\n+    @Json(name \u003d\"token_type\")\n     var tokenType: String \u003d \"\",\n \n-    @SerializedName(\"access_token\")\n+    @Json(name \u003d\"access_token\")\n     var accessToken: String \u003d \"\",\n \n-    @SerializedName(\"athlete\")\n+    @Json(name \u003d\"athlete\")\n     var athleteSummary: Athlete? \u003d null,\n \n-    @SerializedName(\"refresh_token\")\n+    @Json(name \u003d\"refresh_token\")\n     var refreshToken: String \u003d \"\",\n \n-    @SerializedName(\"expires_at\")\n+    @Json(name \u003d\"expires_at\")\n     var expiresAt: Int \u003d 0,\n \n-    @SerializedName(\"state\")\n+    @Json(name \u003d\"state\")\n     var state: String \u003d \"\"\n )"},{"sha":"b4437ace89cc457c557b06bb39e6380a780310f9","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/ZoneRange.kt","status":"modified","additions":3,"changes":6,"patch":"@@ -16,18 +16,18 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class ZoneRange(\n     /**\n      * The minimum value in the range.\n      */\n-    @SerializedName(\"min\")\n+    @Json(name \u003d\"min\")\n     var min: Int \u003d 0,\n \n     /**\n      * The maximum value in the range.\n      */\n-    @SerializedName(\"max\")\n+    @Json(name \u003d\"max\")\n     var max: Int \u003d 0\n )"},{"sha":"9c92592d5ca0a4360f68d4da75bcbbbd8c3d875a","filename":"strava_api/src/main/java/com/simplaapliko/strava/model/Zones.kt","status":"modified","additions":3,"changes":6,"patch":"@@ -16,20 +16,20 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.gson.annotations.SerializedName\n+import com.squareup.moshi.Json\n \n data class Zones(\n     /**\n      * An instance of HeartRateZoneRanges.\n      * @see com.simplaapliko.strava.model.HeartRateZoneRanges\n      */\n-    @SerializedName(\"heart_rate\")\n+    @Json(name \u003d\"heart_rate\")\n     var heartRate: HeartRateZoneRanges? \u003d null,\n \n     /**\n      * An instance of PowerZoneRanges.\n      * @see com.simplaapliko.strava.model.PowerZoneRanges\n      */\n-    @SerializedName(\"power\")\n+    @Json(name \u003d\"power\")\n     var power: PowerZoneRanges? \u003d null\n ) : StravaResponse()"},{"sha":"0a95ed0c937248b07d5409f42d7cae056b145ef0","filename":"strava_api/src/test/java/com.simplaapliko.strava/gson/FrameTypeTest.kt","status":"modified","additions":28,"changes":36,"patch":"@@ -27,39 +27,59 @@ class FrameTypeTest {\n     fun emptyFrameType_shouldBeConvertedToUnknown() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n+        assertThat(model.frameType).isEqualTo(FrameType.UNKNOWN)\n+    }\n+\n+    @Test\n+    fun nullFrameType_shouldBeConvertedToUnknown() {\n+        val json \u003d \"\"\"{\"frame_type\" : null}\"\"\"\n+\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n+\n+        assertThat(model!!).isNotNull()\n         assertThat(model.frameType).isEqualTo(FrameType.UNKNOWN)\n     }\n \n     @Test\n     fun frameType0_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"frame_type\" : 0}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.frameType).isEqualTo(FrameType.UNKNOWN)\n     }\n \n     @Test\n     fun frameType3_shouldBeConvertedToRoadBike() {\n         val json \u003d \"\"\"{\"frame_type\" : 3}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.frameType).isEqualTo(FrameType.ROAD)\n     }\n \n     @Test\n     fun frameType5_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"frame_type\" : 5}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.frameType).isEqualTo(FrameType.UNKNOWN)\n     }\n }"},{"sha":"30d12147cd51a0754001aafa249e0b0c9de17b84","filename":"strava_api/src/test/java/com.simplaapliko.strava/gson/FriendStateTest.kt","status":"modified","additions":13,"changes":20,"patch":"@@ -27,20 +27,24 @@ class FriendStateTest {\n     fun emptyFriendState_shouldBeConvertedToUnknown() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.friend).isEqualTo(FriendState.UNKNOWN)\n         assertThat(model.follower).isEqualTo(FriendState.UNKNOWN)\n     }\n \n     @Test\n-    fun friendStateNull_shouldBeConvertedToUnknown() {\n+    fun nullFriendState_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"friend\" : null, \"follower\" : null}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.friend).isEqualTo(FriendState.UNKNOWN)\n         assertThat(model.follower).isEqualTo(FriendState.UNKNOWN)\n     }\n@@ -49,9 +53,11 @@ class FriendStateTest {\n     fun friendStatePending_shouldBeConvertedToPending() {\n         val json \u003d \"\"\"{\"friend\" : \"pending\", \"follower\" : \"pending\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.friend).isEqualTo(FriendState.PENDING)\n         assertThat(model.follower).isEqualTo(FriendState.PENDING)\n     }"},{"sha":"91e39162bae7f8d7f38f01c9d17889fcc6c3b2da","filename":"strava_api/src/test/java/com.simplaapliko.strava/gson/MeasurementPreferenceTest.kt","status":"modified","additions":13,"changes":20,"patch":"@@ -27,29 +27,35 @@ class MeasurementPreferenceTest {\n     fun emptyMeasurementPreference_shouldBeConvertedToUnknown() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.measurementPreference).isEqualTo(MeasurementPreference.UNKNOWN)\n     }\n \n     @Test\n-    fun measurementPreferenceNull_shouldBeConvertedToUnknown() {\n+    fun nullMeasurementPreference_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"measurement_preference\" : null}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.measurementPreference).isEqualTo(MeasurementPreference.UNKNOWN)\n     }\n \n     @Test\n     fun  measurementPreferenceMeters_shouldBeConvertedToMeters() {\n         val json \u003d \"\"\"{\"measurement_preference\" : \"meters\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.measurementPreference).isEqualTo(MeasurementPreference.METERS)\n     }\n }"},{"sha":"c0d107e6c97dd8fdf33736d6925bb1098627da6b","filename":"strava_api/src/test/java/com.simplaapliko.strava/gson/ResourceStateTest.kt","status":"modified","additions":16,"changes":24,"patch":"@@ -27,39 +27,47 @@ class ResourceStateTest {\n     fun emptyResourceState_shouldBeConvertedToUnknown() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n     }\n \n     @Test\n     fun resourceState0_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"resource_state\" : 0}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n     }\n \n     @Test\n     fun resourceState3_shouldBeConvertedToDetail() {\n         val json \u003d \"\"\"{\"resource_state\" : 3}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.resourceState).isEqualTo(ResourceState.DETAIL)\n     }\n \n     @Test\n     fun resourceState5_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"resource_state\" : 5}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n     }\n }"},{"sha":"cb150ad9b7897eedbb12376ff1caa4a527ee127d","filename":"strava_api/src/test/java/com.simplaapliko.strava/gson/SexTest.kt","status":"modified","additions":28,"changes":36,"patch":"@@ -27,39 +27,59 @@ class SexTest {\n     fun emptyJson_sexShouldBeConvertedToUnknown() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.sex).isEqualTo(Sex.UNKNOWN)\n     }\n \n     @Test\n     fun emptySex_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"sex\" : \"\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n+        assertThat(model.sex).isEqualTo(Sex.UNKNOWN)\n+    }\n+\n+    @Test\n+    fun nullSex_shouldBeConvertedToUnknown() {\n+        val json \u003d \"\"\"{\"sex\" : null}\"\"\"\n+\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n+\n+        assertThat(model!!).isNotNull()\n         assertThat(model.sex).isEqualTo(Sex.UNKNOWN)\n     }\n \n     @Test\n     fun sexM_shouldBeConvertedToM() {\n         val json \u003d \"\"\"{\"sex\" : \"M\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.sex).isEqualTo(Sex.M)\n     }\n \n     @Test\n     fun sexUnknown_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"sex\" : \"unknown_sex\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.sex).isEqualTo(Sex.UNKNOWN)\n     }\n }"},{"sha":"3ca1fb9e95d4c0e01322ac285bcf875f0e08bd78","filename":"strava_api/src/test/java/com.simplaapliko.strava/gson/SportTypeTest.kt","status":"modified","additions":28,"changes":36,"patch":"@@ -27,39 +27,59 @@ class SportTypeTest {\n     fun emptyJson_sportTypeShouldBeConvertedToUnknown() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, SummaryClub::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryClub::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.sportType).isEqualTo(SportType.UNKNOWN)\n     }\n \n     @Test\n     fun emptySportType_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"sport_type\" : \"\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, SummaryClub::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryClub::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n+        assertThat(model.sportType).isEqualTo(SportType.UNKNOWN)\n+    }\n+\n+    @Test\n+    fun nullSportType_shouldBeConvertedToUnknown() {\n+        val json \u003d \"\"\"{\"sport_type\" : null}\"\"\"\n+\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryClub::class.java)\n+                .fromJson(json)\n+\n+        assertThat(model!!).isNotNull()\n         assertThat(model.sportType).isEqualTo(SportType.UNKNOWN)\n     }\n \n     @Test\n     fun sportTypeCycling_shouldBeConvertedToCycling() {\n         val json \u003d \"\"\"{\"sport_type\" : \"cycling\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, SummaryClub::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryClub::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.sportType).isEqualTo(SportType.CYCLING)\n     }\n \n     @Test\n     fun sportTypeUnknown_shouldBeConvertedToUnknown() {\n         val json \u003d \"\"\"{\"sport_type\" : \"unknown_type\"}\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, SummaryClub::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryClub::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.sportType).isEqualTo(SportType.UNKNOWN)\n     }\n }"},{"sha":"3a655e3771d0256586cfd9c7ee0ee1786846b1d2","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/ActivityStatsTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class ActivityStatsTest {\n@@ -26,9 +26,11 @@ class ActivityStatsTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, ActivityStats::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(ActivityStats::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.biggestRideDistance).isEqualTo(0.0)\n         assertThat(model.biggestClimbElevationGain).isEqualTo(0.0)\n         assertThat(model.recentRideTotals).isNull()"},{"sha":"f64f6ac4c67ac4baa301d2c247289b39f305cef2","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/ActivityTotalTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class ActivityTotalTest {\n@@ -26,9 +26,11 @@ class ActivityTotalTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, ActivityTotal::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(ActivityTotal::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.count).isEqualTo(0)\n         assertThat(model.distance).isEqualTo(0.0)\n         assertThat(model.movingTime).isEqualTo(0)"},{"sha":"48fa7711d44c20151ba5cc5718f314b61ac4d04d","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/AthleteTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class AthleteTest {\n@@ -26,9 +26,11 @@ class AthleteTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Athlete::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Athlete::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.id).isEqualTo(0)\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n         assertThat(model.firstName).isEqualTo(\"\")"},{"sha":"6e1f6eb09be6ba983d2ed1170162bff834eec2c4","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/DetailedGearTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class DetailedGearTest {\n@@ -26,9 +26,11 @@ class DetailedGearTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.id).isEmpty()\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n         assertThat(model.primary).isFalse()"},{"sha":"438fcd43ba2600e938eae71d1777828f9a85fda8","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/FaultTest.kt","status":"modified","additions":9,"changes":14,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class FaultTest {\n@@ -26,9 +26,11 @@ class FaultTest {\n     fun emptyJson_modelShouldNotHaveErrors() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.errors).isNull()\n         assertThat(model.errorMessage).isNull()\n     }\n@@ -47,9 +49,11 @@ class FaultTest {\n                 \"message\": \"message\"\n             }\"\"\"\n \n-        val model \u003d GsonUtils.gson()\n-            .fromJson(json, DetailedGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(DetailedGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.errors).hasSize(1)\n         assertThat(model.errorMessage).isEqualTo(\"message\")\n     }"},{"sha":"10742507d5d449f33c92a6ed9247b52118900c70","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/HeartRateZoneRangesTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class HeartRateZoneRangesTest {\n@@ -26,9 +26,11 @@ class HeartRateZoneRangesTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, HeartRateZoneRanges::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(HeartRateZoneRanges::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.customZones).isFalse()\n         assertThat(model.zones).isEmpty()\n     }"},{"sha":"dbf61cd2ef9749ad40da1fa212dfb7872ce0425c","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/PowerZoneRangesTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class PowerZoneRangesTest {\n@@ -26,9 +26,11 @@ class PowerZoneRangesTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, PowerZoneRanges::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(PowerZoneRanges::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.zones).isEmpty()\n     }\n }"},{"sha":"576f1c4a1c25fc31d356c1bffdecd012d93f6924","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/RefreshTokenTest.kt","status":"modified","additions":10,"changes":18,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.common.truth.Truth\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.google.common.truth.Truth.assertThat\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class RefreshTokenTest {\n@@ -26,12 +26,14 @@ class RefreshTokenTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-            .fromJson(json, RefreshToken::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(RefreshToken::class.java)\n+                .fromJson(json)\n \n-        Truth.assertThat(model.tokenType).isEmpty()\n-        Truth.assertThat(model.accessToken).isEmpty()\n-        Truth.assertThat(model.refreshToken).isEmpty()\n-        Truth.assertThat(model.expiresAt).isEqualTo(0)\n+        assertThat(model!!).isNotNull()\n+        assertThat(model.tokenType).isEmpty()\n+        assertThat(model.accessToken).isEmpty()\n+        assertThat(model.refreshToken).isEmpty()\n+        assertThat(model.expiresAt).isEqualTo(0)\n     }\n }"},{"sha":"0e928ae5ea5d3141def5853c89695856579930b6","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/SummaryClubTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class SummaryClubTest {\n@@ -26,9 +26,11 @@ class SummaryClubTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, SummaryClub::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryClub::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.id).isEqualTo(0)\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n         assertThat(model.name).isEmpty()"},{"sha":"64047c0bf66cb9fed3179ea5e56f0b7d3fa9ef79","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/SummaryGearTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class SummaryGearTest {\n@@ -26,9 +26,11 @@ class SummaryGearTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, SummaryGear::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(SummaryGear::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.id).isEmpty()\n         assertThat(model.resourceState).isEqualTo(ResourceState.UNKNOWN)\n         assertThat(model.primary).isFalse()"},{"sha":"34aa9c1ede6b625a9727348368dcf1408cbb654c","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/TokenTest.kt","status":"modified","additions":12,"changes":22,"patch":"@@ -16,8 +16,8 @@\n \n package com.simplaapliko.strava.model\n \n-import com.google.common.truth.Truth\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.google.common.truth.Truth.assertThat\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class TokenTest {\n@@ -26,14 +26,16 @@ class TokenTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-            .fromJson(json, Token::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Token::class.java)\n+                .fromJson(json)\n \n-        Truth.assertThat(model.tokenType).isEmpty()\n-        Truth.assertThat(model.accessToken).isEmpty()\n-        Truth.assertThat(model.athleteSummary).isNull()\n-        Truth.assertThat(model.refreshToken).isEmpty()\n-        Truth.assertThat(model.expiresAt).isEqualTo(0)\n-        Truth.assertThat(model.state).isEmpty()\n+        assertThat(model!!).isNotNull()\n+        assertThat(model.tokenType).isEmpty()\n+        assertThat(model.accessToken).isEmpty()\n+        assertThat(model.athleteSummary).isNull()\n+        assertThat(model.refreshToken).isEmpty()\n+        assertThat(model.expiresAt).isEqualTo(0)\n+        assertThat(model.state).isEmpty()\n     }\n }"},{"sha":"6d26468f72fcffa8c1215942e31c3f5e7d532d20","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/ZoneRangeTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class ZoneRangeTest {\n@@ -26,9 +26,11 @@ class ZoneRangeTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, ZoneRange::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(ZoneRange::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.min).isEqualTo(0)\n         assertThat(model.max).isEqualTo(0)\n     }"},{"sha":"5b27e07fd581919724898b5343c34f6ce4f31319","filename":"strava_api/src/test/java/com.simplaapliko.strava/model/ZonesTest.kt","status":"modified","additions":5,"changes":8,"patch":"@@ -17,7 +17,7 @@\n package com.simplaapliko.strava.model\n \n import com.google.common.truth.Truth.assertThat\n-import com.simplaapliko.strava.gson.GsonUtils\n+import com.simplaapliko.strava.gson.JsonUtils\n import org.junit.Test\n \n class ZonesTest {\n@@ -26,9 +26,11 @@ class ZonesTest {\n     fun emptyJson_modelShouldHaveDefaultValues() {\n         val json \u003d \"{}\"\n \n-        val model \u003d GsonUtils.gson()\n-                .fromJson(json, Zones::class.java)\n+        val model \u003d JsonUtils.moshi()\n+                .adapter(Zones::class.java)\n+                .fromJson(json)\n \n+        assertThat(model!!).isNotNull()\n         assertThat(model.heartRate).isNull()\n         assertThat(model.power).isNull()\n     }"}]}